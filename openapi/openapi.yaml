openapi: 3.0.3
info:
  title: Parking system
  description: |-
    Parking system endpoint documentation specification.
  version: 0.0.1
servers:
  - url: http://localhost:8080
tags:
  - name: employee
  - name: parkingSlot
paths:
  /employee/register:
    post:
      tags:
        - employee
      operationId: createEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCreate'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /employee/login:
    post:
      tags:
        - employee
      operationId: loginEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeLoginResponse'
        '400':
          description: Login not successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /employee/{employeeId}:
    get:
      tags:
        - employee
      operationId: getEmployee
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully get for employee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - employee
      operationId: updateEmployee
      description: Update an existing employee
      parameters:
        - name: employeeId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeUpdate'
        required: true
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        '400':
          description: Login not successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /parkingslot/all:
    get:
      tags:
        - parkingSlot
      operationId: getParkingSlots
      responses:
        '200':
          description: Return all parking slots.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ParkingSlotResponse'
  /ticket:
    post:
      tags:
        - ticket
      operationId: createTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketCreate'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /ticket/{ticketId}:
    parameters:
      - name: ticketId
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - ticket
      operationId: getTicket
      responses:
        '200':
          description: Successfully get for ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - ticket
      operationId: updateTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketUpdate'
        required: true
      responses:
        '200':
          description: Successfully get for ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - ticket
      operationId: deleteTicket
      responses:
        '200':
          description: Successfully get for ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketResponse'
        '404':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    EmployeeCreate:
      allOf:
        - $ref: '#/components/schemas/EmployeeLogin'
      type: object
      required:
        - name
        - surname
        - phoneNumber
        - personalId
        - licencePlateNumber
      properties:
        name:
          type: string
          example: Bob
        surname:
          type: string
          example: Bombers
        phoneNumber:
          type: string
          pattern: '^\+\d{12}$'
          example: "+421901234567"
        personalId:
          type: integer
          format: int32
        licencePlateNumber:
          type: string
          example: "KE223JK"
    EmployeeResponse:
      type: object
      required:
        - id
        - name
        - surname
        - phoneNumber
        - personalId
        - email
        - licencePlateNumber
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        phoneNumber:
          type: string
        personalId:
          type: integer
          format: int64
        email:
          type: string
        licencePlateNumber:
          type: string
    EmployeeLogin:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
          example: "bob@example.com"
        password:
          type: string
          example: "Bob.amazingPa$$"
    EmployeeLoginResponse:
      required:
        - token
      type: object
      properties:
        token:
          type: integer
          format: int64
    EmployeeUpdate:
      required:
        - licencePlateNumber
        - phoneNumber
      type: object
      properties:
        licencePlateNumber:
          type: string
        phoneNumber:
          type: string
          pattern: '^\+\d{12}$'
          example: "+421901234567"
    ParkingSlotResponse:
      required:
        - id
        - status
        - coordinate1
        - coordinate2
        - coordinate3
        - coordinate4
      properties:
        id:
          type: integer
          format: int64
          example: 1
        status:
          type: string
          enum: [USED, FREE, UNAVAILABLE]
          example: USED
        coordinate1:
          type: array
          items:
            type: number
            format: double
          example: [7.321334354551, 8.343434353]
        coordinate2:
          type: array
          items:
            type: number
            format: double
          example: [8.135436451, 3.2563415341]
        coordinate3:
          type: array
          items:
            type: number
            format: double
          example: [13.34434135415, 2.23515345344]
        coordinate4:
          type: number
          items:
            format: double
          example: [6.1355134451, 8.34553465431]
    TicketCreate:
      required:
        - employeeID
        - parkingSlotID
        - startDate
        - endDate
      properties:
        employeeID:
          type: integer
          format: int64
          example: 1
        parkingSlotID:
          type: integer
          format: int64
          example: 1
        startDate:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        endDate:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
    TicketResponse:
      allOf:
        - $ref: '#/components/schemas/TicketCreate'
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          example: 1
    TicketUpdate:
      required:
        - startDate
        - endDate
      type: object
      properties:
        startDate:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
        endDate:
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z

    ErrorResponse:
      type: object
      properties:
        message:
          type: string